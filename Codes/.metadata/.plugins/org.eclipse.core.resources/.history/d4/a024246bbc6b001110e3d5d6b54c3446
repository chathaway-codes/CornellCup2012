/*
 * Copyright (C) 2012 Charles Hathaway
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is furnished to do
 * so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
 * IO_Thread.cpp
 *
 *  Created on: Mar 11, 2012
 *  Author: Charles Hathaway
 */


#include "IO_Thread.hpp"

IO_Thread::IO_Thread()
	: running(false)
{
	QThread();
}

void IO_Thread::run()
{
	if(running)
		return;
	running = true;

	while(queue.size())
	{
		for(list<IO_Filter>::iterator it = this->filters.begin(); it != filters.end(); it++) {
			if((*it)->applies((queue.front())->level, (queue.front())->id)) {
				(*it)->write((queue.front())->level, (queue.front())->id, (queue.front())->message);
			}
		}
		queue.pop();
	}
}

void IO_Thread::push_back(Message *m)
{
	this->messages.push(m);
}

